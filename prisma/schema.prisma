generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  name                String
  password            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  emailVerified       DateTime?
  image               String?
  categories          Category[]
  chatHistory         ChatHistory[]
  dataExports         DataExport[]
  notifications       Notification[]
  passwordResetTokens PasswordResetToken[]
  projects            Project[]
  collaborations      ProjectCollaborator[]
  reminders           Reminder[]
  tasks               Task[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  completed   Boolean    @default(false)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  categoryId  String?
  projectId   String?
  completedAt DateTime?
  status      TaskStatus @default(TODO)
  reminders   Reminder[]
  category    Category?  @relation(fields: [categoryId], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]      @relation("TagToTask")

  @@index([userId])
  @@index([categoryId])
  @@index([projectId])
  @@index([status])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@unique([userId, name])
  @@index([userId])
}

model Project {
  id            String                @id @default(uuid())
  name          String
  description   String?
  status        ProjectStatus         @default(ACTIVE)
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  userId        String
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]
  tasks         Task[]

  @@unique([userId, name])
  @@index([userId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]   @relation("TagToTask")
}

model ChatHistory {
  id               String   @id @default(uuid())
  userMessage      String
  assistantMessage String
  action           String?
  metadata         Json?
  model            String?
  createdAt        DateTime @default(now())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  readAt    DateTime?
  link      String?
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}

model Reminder {
  id          String        @id @default(uuid())
  title       String
  description String?
  reminderAt  DateTime
  recurring   RecurringType @default(NONE)
  sent        Boolean       @default(false)
  sentAt      DateTime?
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  taskId      String?
  task        Task?         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, active])
  @@index([reminderAt])
  @@index([taskId])
}

model ProjectCollaborator {
  id         String           @id @default(uuid())
  role       CollaboratorRole @default(VIEWER)
  acceptedAt DateTime?
  invitedAt  DateTime         @default(now())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  projectId  String
  userId     String
  project    Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model DataExport {
  id        String       @id @default(uuid())
  filename  String
  format    ExportFormat
  status    ExportStatus @default(PENDING)
  url       String?
  expiresAt DateTime?
  error     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TASK_DUE
  TASK_OVERDUE
  REMINDER
  PROJECT_INVITATION
  PROJECT_UPDATE
}

enum RecurringType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum CollaboratorRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum ExportFormat {
  CSV
  PDF
  JSON
  EXCEL
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
